{
  "name": "password-utils",
  "tagline": "PasswordUtils is a fast, simple, and lightweight utility class containing series of methods for creating and comparing secure passwords in Java",
  "body": "# password-utils [![Build Status](https://travis-ci.org/farbodsafaei/password-utils.svg?branch=master)](https://travis-ci.org/farbodsafaei/password-utils)\r\n\r\nPasswordUtils is a fast, simple and lightweight utility class containing series of methods for creating, comparing, hashing, and random generating secure passwords to be stored on database or used for other purposes. It uses Java's latest built-in hashing algorithms and is independent of any other libraries.\r\n\r\n#### Hashing output format\r\n\r\nAll passwords are salted and hashed by selecting a desired hash algorithm. The secure salted and hashed passwords are generated in the below format to be used in the applications as desired:\r\n\r\n```\r\nalgorithm:salt:hash\r\n```\r\n\r\nThe first section is the name of the algorithm in plaintext. Second section is the salt value encoded in Based64 and third section is the hashed value of the raw password and salt combined then encoded in Base64. The separator character is a ':' (colon character). Example:\r\n\r\n```\r\nSHA512:nkQfEBbs7FwwcADCq5UGtg==:H/Bg9EQfNXrPybVLXBg9MNx1hB2VHM9db5Fwzvlx3i1k53lOEJM9eTofCkMBddQEzRd9sNDCACZZsflh42IyCw==\r\n```\r\n\r\nBreak-down of above line:  \r\nAlgorithm: ```SHA512```  \r\nSalt (Base64): ```nkQfEBbs7FwwcADCq5UGtg==```  \r\nHash (Base64): ```H/Bg9EQfNXrPybVLXBg9MNx1hB2VHM9db5Fwzvlx3i1k53lOEJM9eTofCkMBddQEzRd9sNDCACZZsflh42IyCw==```  \r\n\r\n#### How to hash a password\r\n\r\nSimply pass the raw password (in plaintext) to the ```hashPassword()``` method with a desired hash algorithm:\r\n\r\n```java\r\nString rawPassword = \"badPassword1234\";\r\nString result = PasswordUtils.hashPassword(rawPassword, HashAlgorithm.SHA512);\r\n```\r\n\r\nFor faster and easier usage, no algorithm is required to be passed and a default (SHA-256) hash algorithm will be used:\r\n  \r\n```java\r\nString rawPassword = \"badPassword1234\";\r\nString result = PasswordUtils.hashPassword(rawPassword);\r\n```\r\n\r\nThe result string will contain a properly formatted password hash:  \r\n\r\n```\r\nSHA512:nkQfEBbs7FwwcADCq5UGtg==:H/Bg9EQfNXrPybVLXBg9MNx1hB2VHM9db5Fwzvlx3i1k53lOEJM9eTofCkMBddQEzRd9sNDCACZZsflh42IyCw==\r\n```\r\n\r\nTo verify a raw password (in plaintext) with a hashed password (with the same format created using this class) simply use ```verifyPassword()``` method:\r\n\r\n```java\r\nString rawPassword = \"badPassword1234\";\r\nString alreadyHashedPassword = \"SHA512:nkQfEBbs7FwwcADCq5UGtg==:H/Bg9EQfNXrPybVLXBg9MNx1hB2VHM9db5Fwzvlx3i1k53lOEJM9eTofCkMBddQEzRd9sNDCACZZsflh42IyCw==\";\r\nboolean result = PasswordUtils.verifyPassword(rawPassword, alreadyHashedPassword);\r\n```\r\n\r\n#### How to generate a random password\r\n\r\nTo generate a random password, simply call ```generateRandomPassword(int length)``` and pass a desired length or call ```generateRandomPassword()``` with no arguements which uses default length.\r\n\r\nRandom password generator in this class can be used to create secure temporary passwords. It uses a random combination of letters, numbers and special characters to generate a password. Values are taken from ranges: ```[A-Z] [a-z] [0-9]``` and special characters:\r\n \r\n```! \"  #  $   %   &  '  (  )  *  +  ,  -  .  /  :  ;  <  =  >  ?  @ [  \\  ]  ^  _  `  {  |  }  ~```   \r\n\r\n \r\n",
  "google": "",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}